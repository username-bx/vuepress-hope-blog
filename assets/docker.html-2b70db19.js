import{_ as a,o as s,c as n,b as e}from"./app-a3db40ac.js";const l={},o=e(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> docker</h1><h2 id="centos7安装docker全过程记录" tabindex="-1"><a class="header-anchor" href="#centos7安装docker全过程记录" aria-hidden="true">#</a> centos7安装Docker全过程记录</h2><p>1.查看当前的内核版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">uname</span> <span class="token parameter variable">-r</span>
<span class="token comment"># 我这里是3.10 ，满足条件。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖1.安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>设置 yum 源 (设置一个yum源，下面两个都可用)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）

yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>查看可用版本有哪些</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>选择一个版本并安装：yum install docker-ce-版本号</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce-18.03.1.ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-常用命令" tabindex="-1"><a class="header-anchor" href="#docker-常用命令" aria-hidden="true">#</a> docker 常用命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">docker</span> version
  <span class="token comment"># 检查 client server</span>
  <span class="token comment"># windos 双击exe 启动</span>
  <span class="token comment"># centent systemctl start docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dockerfile 文件编写</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># FROM：表示新建的iamge（镜像）需要在node环境中进行，那么就需要node镜像。</span>
<span class="token comment"># WORKDIR：声明了工作目录\`/app\`，即node代码在该目录下进行</span>
<span class="token comment"># COPY：作用是，将当前目录的所有代码都复制到工作目录下</span>
<span class="token comment"># RUN shell 命令</span>
<span class="token comment"># CMD：后面跟着一句shell 命令</span>
FROM node:20-alpine
COPY <span class="token builtin class-name">.</span> /
RUN <span class="token function">npm</span> <span class="token function">install</span>
CMD <span class="token punctuation">[</span><span class="token string">&quot;node&quot;</span>, <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> my-docker-demo:1.0 <span class="token builtin class-name">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 -f &lt;file_name&gt; 指定构建文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> house:1.0 <span class="token builtin class-name">.</span> <span class="token parameter variable">-f</span> Dockerfile.dev

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">docker</span> run <span class="token operator">&lt;</span>name:version<span class="token operator">&gt;</span>

<span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>xxx<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>name:version<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询本机正在的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
<span class="token function">docker</span> stop <span class="token operator">&lt;</span>container_id<span class="token operator">&gt;</span>
<span class="token function">docker</span> start <span class="token operator">&lt;</span>container_name<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看容器 镜像 删除容器 删除镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>
<span class="token function">docker</span> image <span class="token function">ls</span>

<span class="token function">docker</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>container_id<span class="token operator">&gt;</span> <span class="token function">docker</span> container <span class="token function">rm</span> <span class="token operator">&lt;</span>container_id<span class="token operator">&gt;</span>

<span class="token function">docker</span> rmi <span class="token operator">&lt;</span>image_id<span class="token operator">&gt;</span> <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token operator">&lt;</span>image_id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存镜像到压缩文件 加载压缩文件到docker镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> ~/Document/<span class="token operator">&lt;</span>file.name<span class="token operator">&gt;</span>.tar house:1.0

<span class="token function">docker</span> load <span class="token parameter variable">-i</span> ~/Document/<span class="token operator">&lt;</span>file.name<span class="token operator">&gt;</span>.tar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-安装-mongo" tabindex="-1"><a class="header-anchor" href="#docker-安装-mongo" aria-hidden="true">#</a> docker 安装 mongo</h2><ol><li>拉取 MongoDB Docker 映像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mongo
<span class="token function">docker</span> pull mongodb/mongodb-community-server:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>将映像作为 container 运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mongodb <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token parameter variable">-d</span> mongodb/mongodb-community-server:latest

<span class="token function">docker</span> run <span class="token parameter variable">--name</span> mymongo <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /usr/data/mongo:/data/db mongo:latest <span class="token parameter variable">--auth</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><blockquote><p>此命令中的 -p 27017:27017 会将容器端口映射到主机端口。这样即可使用一个 localhost:27017 连接字符串连接到 MongoDB。</p></blockquote></blockquote><blockquote><blockquote><p>此命令中的 -v 映射容器中的文件到本地</p></blockquote></blockquote><ol start="3"><li>进入 mongo 容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container_id<span class="token operator">&gt;</span> <span class="token function">bash</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使用 mongosh</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ./bin
./mongosh

use admin
db.auth<span class="token punctuation">(</span><span class="token string">&quot;xx&quot;</span>,<span class="token string">&quot;xx&quot;</span><span class="token punctuation">)</span>

db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user: <span class="token string">&quot;useradmin&quot;</span>, pwd: <span class="token string">&quot;adminpassword&quot;</span>, roles: <span class="token punctuation">[</span><span class="token punctuation">{</span> role: <span class="token string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="token string">&quot;admin&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
db.updateUser<span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span>, <span class="token punctuation">{</span>pwd: <span class="token string">&quot;root123&quot;</span>, roles: <span class="token punctuation">[</span><span class="token punctuation">{</span> role: <span class="token string">&quot;readWrite&quot;</span>, db: <span class="token string">&quot;lineDB&quot;</span> <span class="token punctuation">}</span>,<span class="token punctuation">{</span> role: <span class="token string">&quot;readWrite&quot;</span>, db: <span class="token string">&quot;tgDB&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>使用 mongodump 备份</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ./bin
./mongodump <span class="token parameter variable">--host</span><span class="token operator">=</span>xx.xx.xx.xx <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">27011</span> <span class="token parameter variable">--username</span><span class="token operator">=</span>root <span class="token parameter variable">--password</span><span class="token operator">=</span>root123 <span class="token parameter variable">--out</span><span class="token operator">=</span>/usr/backup/mongodump-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>使用 docker -p 复制文件到本地目录</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>container_id<span class="token operator">&gt;</span>:/usr/backup /usr/data/mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用-docker-部署nodejs" tabindex="-1"><a class="header-anchor" href="#使用-docker-部署nodejs" aria-hidden="true">#</a> 使用 docker 部署nodejs</h2><ol><li>切换路径</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/share/nginx/lineBotWebhook/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>构建镜像 build images</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">-build</span> <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>image_name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>根据镜像 运行实例</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>container_name<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token number">4100</span>:4100 <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>image_name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><blockquote><p>--name 给容器实例设置名称<br> -p 映射端口号<br> -d 后台运行容器</p></blockquote></blockquote>`,49),i=[o];function t(r,c){return s(),n("div",null,i)}const d=a(l,[["render",t],["__file","docker.html.vue"]]);export{d as default};
