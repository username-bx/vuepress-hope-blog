const e=JSON.parse('{"key":"v-7cfd36b4","path":"/posts/vue3/2.html","title":"reactive","lang":"zh-CN","frontmatter":{"title":"reactive","shortTitle":"vue-2","image":"/assets/images/navicat.png","icon":"folder-open","date":"2024-06-13T00:00:00.000Z","order":2,"tag":["vue reactive"],"auther":"Tang Yuan","head":[["meta",{"name":"keywords","content":"vue reactive"}],["meta",{"property":"og:url","content":"http://luogesidoc.com/posts/vue3/2.html"}],["meta",{"property":"og:site_name","content":"汤圆"}],["meta",{"property":"og:title","content":"reactive"}],["meta",{"property":"og:description","content":"vue reactive reactivity api: https://v3.vuejs.org/api/reactivity-api 获取响应式数据 API 传入 返回 备注 reactive plain-object 对象代理 深度代理对象中的所有成员 readonly plain-object or proxy 对象代理 只能读取代理对象中的成员，不可修改 ref any { value: ... } 对value的访问是响应式的如果给value的值是一个对象，则会通过reactive函数进行代理如果已经是代理，则直接使用代理 computed function { value: ... } 当读取value值时，会根据情况决定是否要运行函数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T02:50:40.000Z"}],["meta",{"property":"article:author","content":"tangyuan"}],["meta",{"property":"article:tag","content":"vue reactive"}],["meta",{"property":"article:published_time","content":"2024-06-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T02:50:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"reactive\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-13T02:50:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tangyuan\\",\\"url\\":\\"http://luogesidoc.com\\"}]}"]],"description":"vue reactive reactivity api: https://v3.vuejs.org/api/reactivity-api 获取响应式数据 API 传入 返回 备注 reactive plain-object 对象代理 深度代理对象中的所有成员 readonly plain-object or proxy 对象代理 只能读取代理对象中的成员，不可修改 ref any { value: ... } 对value的访问是响应式的如果给value的值是一个对象，则会通过reactive函数进行代理如果已经是代理，则直接使用代理 computed function { value: ... } 当读取value值时，会根据情况决定是否要运行函数"},"headers":[],"git":{"createdTime":1718233741000,"updatedTime":1718247040000,"contributors":[{"name":"Benjamin Ma","email":"benjamin_ma@manka.co.jp","commits":1},{"name":"bx.ma","email":"bx.ma@gmail.com","commits":1}]},"readingTime":{"minutes":4.92,"words":1477},"filePathRelative":"posts/vue3/2.md","localizedDate":"2024年6月13日","excerpt":"<h1> vue reactive</h1>\\n<blockquote>\\n<p>reactivity api: <a href=\\"https://v3.vuejs.org/api/reactivity-api\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://v3.vuejs.org/api/reactivity-api</a></p>\\n</blockquote>\\n<h1> 获取响应式数据</h1>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">API</th>\\n<th>传入</th>\\n<th>返回</th>\\n<th>备注</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\"><code>reactive</code></td>\\n<td><code>plain-object</code></td>\\n<td><code>对象代理</code></td>\\n<td>深度代理对象中的所有成员</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>readonly</code></td>\\n<td><code>plain-object</code> or <code>proxy</code></td>\\n<td><code>对象代理</code></td>\\n<td>只能读取代理对象中的成员，不可修改</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ref</code></td>\\n<td><code>any</code></td>\\n<td><code>{ value: ... }</code></td>\\n<td>对value的访问是响应式的<br>如果给value的值是一个对象，<br>则会通过<code>reactive</code>函数进行代理<br>如果已经是代理，则直接使用代理</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>computed</code></td>\\n<td><code>function</code></td>\\n<td><code>{ value: ... }</code></td>\\n<td>当读取value值时，<br>会<strong>根据情况</strong>决定是否要运行函数</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{e as data};
